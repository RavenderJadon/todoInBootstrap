[{"/Users/rj/todo-bootstrap/src/App.js":"1","/Users/rj/todo-bootstrap/src/navBAr/MenuNavBAr.jsx":"2","/Users/rj/todo-bootstrap/src/components/Completed.jsx":"3","/Users/rj/todo-bootstrap/src/navBAr/CategoryNavBar.jsx":"4","/Users/rj/todo-bootstrap/src/context/DataContext.js":"5","/Users/rj/todo-bootstrap/src/components/AllTodos.jsx":"6","/Users/rj/todo-bootstrap/src/components/UpComing.jsx":"7","/Users/rj/todo-bootstrap/src/navBAr/NavBarOfTodos.jsx":"8","/Users/rj/todo-bootstrap/src/components/Others.jsx":"9","/Users/rj/todo-bootstrap/src/components/Amit.jsx":"10","/Users/rj/todo-bootstrap/src/components/SubCatInHeading.jsx":"11","/Users/rj/todo-bootstrap/src/components/SearchBar.jsx":"12","/Users/rj/todo-bootstrap/src/components/TaskItem.jsx":"13","/Users/rj/todo-bootstrap/src/reportWebVitals.js":"14","/Users/rj/todo-bootstrap/src/components/modal/categoryModal.jsx":"15","/Users/rj/todo-bootstrap/src/components/modal/subCategoryModal.jsx":"16","/Users/rj/todo-bootstrap/src/index.js":"17","/Users/rj/todo-bootstrap/src/components/test.jsx":"18"},{"size":1847,"mtime":1610026085053,"results":"19","hashOfConfig":"20"},{"size":1103,"mtime":1610026130688,"results":"21","hashOfConfig":"20"},{"size":2654,"mtime":1611386627844,"results":"22","hashOfConfig":"20"},{"size":5978,"mtime":1611390840646,"results":"23","hashOfConfig":"20"},{"size":6230,"mtime":1611913710901,"results":"24","hashOfConfig":"20"},{"size":3767,"mtime":1611904100033,"results":"25","hashOfConfig":"20"},{"size":2710,"mtime":1611386569305,"results":"26","hashOfConfig":"20"},{"size":1032,"mtime":1609253705233,"results":"27","hashOfConfig":"20"},{"size":2746,"mtime":1611904132748,"results":"28","hashOfConfig":"20"},{"size":199,"mtime":1609249161805,"results":"29","hashOfConfig":"20"},{"size":164,"mtime":1609311438752,"results":"30","hashOfConfig":"20"},{"size":7286,"mtime":1610618360816,"results":"31","hashOfConfig":"20"},{"size":506,"mtime":1609323434349,"results":"32","hashOfConfig":"20"},{"size":362,"mtime":1608366829502,"results":"33","hashOfConfig":"20"},{"size":1427,"mtime":1609749723439,"results":"34","hashOfConfig":"20"},{"size":1340,"mtime":1609750715150,"results":"35","hashOfConfig":"20"},{"size":500,"mtime":1608366829502,"results":"36","hashOfConfig":"20"},{"size":3067,"mtime":1611924755768,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"w2p8cy",{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"68"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/rj/todo-bootstrap/src/App.js",[],["85","86"],"/Users/rj/todo-bootstrap/src/navBAr/MenuNavBAr.jsx",["87","88","89"],"import { Nav, Container, Row, Col } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport {\n  BsHouseDoor,\n  BsGrid,\n  BsStarFill,\n  BsCheckBox,\n  BsTrash,\n  BsFillGiftFill,\n} from \"react-icons/bs\";\n\nconst MenuNavBAr = () => {\n  return (\n    <div className=\"menuBar\">\n      <Nav defaultActiveKey=\"/\" className=\"flex-column\">\n        <h1 className=\"menuBarText\">\n          <BsFillGiftFill />\n        </h1>\n        <Link to=\"/\" className=\"menuBarText\">\n          <h1>\n            <BsHouseDoor />\n          </h1>\n        </Link>\n        <Link to=\"/Upcoming\" className=\"menuBarText\">\n          <h1>\n            <BsGrid />\n          </h1>\n        </Link>\n        <Link to=\"/completed\" className=\"menuBarText\">\n          <h1>\n            <BsStarFill />\n          </h1>\n        </Link>\n        <Link to=\"/other\" className=\"menuBarText\">\n          <h1>\n            <BsCheckBox />\n          </h1>\n        </Link>\n        <Link to=\"/test\" className=\"menuBarText\">\n          <h1>\n            <BsTrash />\n          </h1>\n        </Link>\n      </Nav>\n    </div>\n  );\n};\n\nexport default MenuNavBAr;\n",["90","91"],"/Users/rj/todo-bootstrap/src/components/Completed.jsx",["92","93"],"import { useContext } from \"react\";\nimport { DataContext } from \"../context/DataContext\";\nimport { Card, Button, CardGroup } from \"react-bootstrap\";\n\nconst Completed = () => {\n  const [todoStateInUpComing, setTodoStateInUpComing] = useContext(DataContext);\n  console.log(\"todoStateInUpComing\", todoStateInUpComing);\n\n  const changeWhatsTheStatus = (index) => {\n    const objComing = todoStateInUpComing.task[index];\n    objComing.whatsTheStatus = \"deleted\";\n    const taskArr = todoStateInUpComing.task;\n    console.log(\"taskArr\", taskArr);\n    const firstArr = taskArr.slice(0, index);\n    const indexUpgrade = index + 1;\n    const secondArr = taskArr.slice(indexUpgrade);\n    const result = [...firstArr, objComing, ...secondArr];\n    setTodoStateInUpComing({\n      ...todoStateInUpComing,\n      task: result,\n    });\n  };\n\n  return (\n    <div className=\"itemsInAllTodosComponentUpComing\">\n      <CardGroup>\n        {todoStateInUpComing.task\n          .filter((todoListItem) => {\n            if (todoStateInUpComing.search == \"\") {\n              return todoListItem;\n            } else if (\n              todoListItem.title\n                .toLowerCase()\n                .includes(todoStateInUpComing.search.toLowerCase())\n            ) {\n              return todoListItem;\n            }\n          })\n          .map((todoListItem, todoListItemIndex) => {\n            return (\n              <div key={todoListItem.id}>\n                {todoListItem.whatsTheStatus === \"completed\" && (\n                  <div>\n                    <div className=\"taskItemDiv\">\n                      <Card border=\"dark\" style={{ width: \"18rem\" }}>\n                        <Card.Body>\n                          <Card.Title>{todoListItem.whatsTheStatus}</Card.Title>\n                          <Card.Text>{todoListItem.title}</Card.Text>\n                          <Card.Text>\n                            {todoListItem.settingForDate} {}{\" \"}\n                            {todoListItem.setting_for_what_time}\n                          </Card.Text>\n                          <Button\n                            variant=\"outline-danger\"\n                            className=\"taskBtn\"\n                            onClick={() =>\n                              changeWhatsTheStatus(todoListItemIndex)\n                            }\n                          >\n                            Delete\n                          </Button>\n                        </Card.Body>\n                      </Card>\n                    </div>\n                  </div>\n                )}\n              </div>\n            );\n          })}\n      </CardGroup>\n    </div>\n  );\n};\nexport default Completed;\n","/Users/rj/todo-bootstrap/src/navBAr/CategoryNavBar.jsx",["94","95","96"],"import { useContext, useState } from \"react\";\nimport { DataContext } from \"../context/DataContext\";\nimport { Button, Row, Col, Collapse, Modal } from \"react-bootstrap\";\nimport Amit from \"../components/Amit\";\nimport CategoryModal from \"../components/modal/categoryModal\";\nimport SubCategoryModal from \"../components/modal/subCategoryModal\";\nimport { BsChevronDown } from \"react-icons/bs\";\n\nconst CategoryNavBar = () => {\n  const [todoState, setTodoState] = useContext(DataContext);\n  const [modalShow, setModalShow] = useState(false);\n  const [modalsubShow, setModalsubShow] = useState(false);\n  const [selectedCategoryId, setSelectedCategoryId] = useState(\"\");\n  const [open, setOpen] = useState(-1);\n  const [modalInInnerCat, setModalInInnerCat] = useState(false);\n  const handleClose = () => {\n    setModalInInnerCat(false);\n    setModalShow(false);\n  };\n  const handleShow = () => setModalInInnerCat(true);\n\n  const [inputCatState, setInputCatState] = useState({\n    category_name: \"\",\n    category_id: todoState.category.length,\n  });\n\n  const [inputSubCatState, setInputSubCatState] = useState({\n    category_id: selectedCategoryId,\n    sub_category_id: todoState.sub_category.length,\n    sub_category_name: \"\",\n  });\n\n  const toggleCollapsable = (index) => {\n    setOpen(open === index ? -1 : index);\n  };\n\n  const setModalAndIndex = (catId) => {\n    setModalsubShow(true);\n    setSelectedCategoryId(catId);\n  };\n  console.log(\"indxCatState\", selectedCategoryId);\n  const onHide = () => {\n    if (inputCatState.category_name === \"\") {\n      console.log(\"hii empty\", inputCatState.category_name);\n      setModalInInnerCat(true);\n      setModalShow(true);\n    } else {\n      const newCat = {\n        category_name: inputCatState.category_name,\n        category_id: todoState.category.length + 1,\n      };\n\n      setTodoState({\n        ...todoState,\n        category: [...todoState.category, newCat],\n      });\n      setInputCatState({\n        ...inputCatState,\n        category_name: \"\",\n      });\n      setModalShow(false);\n    }\n  };\n\n  const onHideSub = () => {\n    console.log({ inputCatState });\n    const newSubCat = {\n      category_id: selectedCategoryId,\n      sub_category_id: inputSubCatState.sub_category_id,\n      sub_category_name: inputSubCatState.sub_category_name,\n    };\n    setTodoState({\n      ...todoState,\n      sub_category: [...todoState.sub_category, newSubCat],\n    });\n    setInputSubCatState({\n      ...inputSubCatState,\n      sub_category_name: \"\",\n    });\n    setModalsubShow(false);\n  };\n\n  return (\n    <div className=\"categoryNavBody\">\n      <div className=\"buttonDiv\">\n        <Button\n          variant=\"danger\"\n          className=\"plus-btn\"\n          onClick={() => setModalShow(true)}\n        >\n          +\n        </Button>\n\n        <CategoryModal\n          show={modalShow}\n          onHide={onHide}\n          inputCatState={inputCatState}\n          setInputCatState={setInputCatState}\n        />\n      </div>\n\n      {todoState.category.map((category, categoryIndex) => {\n        return (\n          <div key={category.category_id}>\n            <div className=\"khatkar\">\n              <div>\n                <Row>\n                  <Col xs={7} md={5}>\n                    <h3 className=\"hoverCategory\">{category.category_name}</h3>\n                  </Col>\n                  <Col xs={6} md={4}>\n                    <Button\n                      variant=\"light\"\n                      size=\"sm\"\n                      className=\"addSubCatBtn\"\n                      onClick={() => setModalAndIndex(category.category_id)}\n                    >\n                      +\n                    </Button>\n                    <Button\n                      onClick={() => toggleCollapsable(categoryIndex)}\n                      aria-controls=\"example-collapse-text\"\n                      aria-expanded={open}\n                      variant=\"light\"\n                      size=\"sm\"\n                      className=\"testTest\"\n                    >\n                      {/* button to show sub category */}\n                      <BsChevronDown />\n                    </Button>\n\n                    <SubCategoryModal\n                      show={modalsubShow}\n                      onHideSub={onHideSub}\n                      inputSubCatState={inputSubCatState}\n                      setInputSubCatState={setInputSubCatState}\n                      categoryIndex={categoryIndex}\n                    />\n                  </Col>\n                </Row>\n              </div>\n\n              <>\n                {\" \"}\n                <Modal\n                  show={modalInInnerCat}\n                  onHide={handleClose}\n                  backdrop=\"static\"\n                  keyboard={false}\n                >\n                  <Modal.Header closeButton>\n                    <Modal.Title>you have to write some thing</Modal.Title>\n                  </Modal.Header>\n                  <Modal.Body>you have to write some thing</Modal.Body>\n                  <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                      Close\n                    </Button>\n                  </Modal.Footer>\n                </Modal>\n              </>\n\n              <>\n                <Collapse in={open === categoryIndex}>\n                  <div id=\"example-collapse-text\">\n                    {todoState.sub_category\n                      .filter((it) => it.category_id == category.category_id)\n                      .map((subCatName) => {\n                        return (\n                          <div>\n                            <div key={subCatName.sub_category_id}>\n                              <p>{subCatName.sub_category_name}</p>\n                            </div>\n                          </div>\n                        );\n                      })}\n                  </div>\n                </Collapse>\n              </>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\nexport default CategoryNavBar;\n","/Users/rj/todo-bootstrap/src/context/DataContext.js",[],"/Users/rj/todo-bootstrap/src/components/AllTodos.jsx",["97","98"],"import { useContext } from \"react\";\nimport { DataContext } from \"../context/DataContext\";\n// import TaskItem from \"./TaskItem\";\nimport { CardGroup, Card, Button } from \"react-bootstrap\";\n\nconst AllTodos = () => {\n  const [todoState, setTodoState] = useContext(DataContext);\n  console.log(\"todoState :\", todoState);\n\n  const changeWhatsTheStatus = (index) => {\n    const objComing = todoState.task[index];\n    objComing.whatsTheStatus = \"deleted\";\n    const taskArr = todoState.task;\n    console.log(\"taskArr\", taskArr);\n    const firstArr = taskArr.slice(0, index);\n    const indexUpgrade = index + 1;\n    const secondArr = taskArr.slice(indexUpgrade);\n    const result = [...firstArr, objComing, ...secondArr];\n    setTodoState({\n      ...todoState,\n      task: result,\n    });\n  };\n\n  const changeWhatsTheStatusOfUpComing = (index) => {\n    const objComing = todoState.task[index];\n    objComing.whatsTheStatus = \"completed\";\n    const taskArr = todoState.task;\n    console.log(\"taskArr\", taskArr);\n    const firstArr = taskArr.slice(0, index);\n    const indexUpgrade = index + 1;\n    const secondArr = taskArr.slice(indexUpgrade);\n    const result = [...firstArr, objComing, ...secondArr];\n    setTodoState({\n      ...todoState,\n      task: result,\n    });\n  };\n\n  return (\n    <div className=\"itemsInAllTodosComponentUpComing\">\n      <CardGroup>\n        {todoState.task\n          .filter((items) => {\n            if (todoState.search == \"\") {\n              return items;\n            } else if (\n              items.title.toLowerCase().includes(todoState.search.toLowerCase())\n            ) {\n              return items;\n            }\n          })\n          .map((items, index) => {\n            return (\n              <div key={items.id}>\n                {items.whatsTheStatus === \"completed\" && (\n                  <div className=\"taskItemDiv\">\n                    <Card border=\"dark\" style={{ width: \"18rem\" }}>\n                      <Card.Body>\n                        <Card.Title>Completed</Card.Title>\n                        <Card.Text>{items.title}</Card.Text>\n                        <Card.Text>\n                          {items.settingForDate} {}{\" \"}\n                          {items.setting_for_what_time}\n                        </Card.Text>\n                        <Button\n                          variant=\"outline-danger\"\n                          className=\"taskBtn\"\n                          onClick={() => changeWhatsTheStatus(index)}\n                        >\n                          Delete\n                        </Button>\n                      </Card.Body>\n                    </Card>\n                  </div>\n                )}\n                {items.whatsTheStatus === \"upcoming\" && (\n                  <div className=\"taskItemDiv\">\n                    <Card border=\"dark\" style={{ width: \"18rem\" }}>\n                      <Card.Body>\n                        <Card.Title>UpComing</Card.Title>\n                        <Card.Text>{items.title}</Card.Text>\n                        <Card.Text>\n                          <p>\n                            {items.settingForDate} {}{\" \"}\n                            {items.setting_for_what_time}\n                          </p>\n                        </Card.Text>\n                        <Button\n                          variant=\"outline-danger\"\n                          className=\"taskBtn\"\n                          onClick={() => changeWhatsTheStatusOfUpComing(index)}\n                        >\n                          Mark as Completed\n                        </Button>\n                      </Card.Body>\n                    </Card>\n                  </div>\n                )}\n              </div>\n            );\n          })}\n      </CardGroup>\n    </div>\n  );\n};\nexport default AllTodos;\n","/Users/rj/todo-bootstrap/src/components/UpComing.jsx",["99","100"],"import { useContext } from \"react\";\nimport { DataContext } from \"../context/DataContext\";\nimport { Card, Button, CardGroup } from \"react-bootstrap\";\n\nconst UpComing = () => {\n  const [todoStateInUpComing, setTodoStateInUpComing] = useContext(DataContext);\n  console.log(\"todoStateInUpComing\", todoStateInUpComing);\n\n  const changeWhatsTheStatus = (todoListItemIndex) => {\n    const objComing = todoStateInUpComing.task[todoListItemIndex];\n    objComing.whatsTheStatus = \"completed\";\n    const taskArr = todoStateInUpComing.task;\n    console.log(\"taskArr\", taskArr);\n    const firstArr = taskArr.slice(0, todoListItemIndex);\n    const indexUpgrade = todoListItemIndex + 1;\n    const secondArr = taskArr.slice(indexUpgrade);\n    const result = [...firstArr, objComing, ...secondArr];\n    setTodoStateInUpComing({\n      ...todoStateInUpComing,\n      task: result,\n    });\n  };\n  return (\n    <div className=\"itemsInAllTodosComponentUpComing\">\n      <CardGroup>\n        {todoStateInUpComing.task\n          .filter((todoListItem) => {\n            if (todoStateInUpComing.search == \"\") {\n              return todoListItem;\n            } else if (\n              todoListItem.title\n                .toLowerCase()\n                .includes(todoStateInUpComing.search.toLowerCase())\n            ) {\n              return todoListItem;\n            }\n          })\n          .map((todoListItem, todoListItemIndex) => {\n            return (\n              <div key={todoListItem.id}>\n                {todoListItem.whatsTheStatus === \"upcoming\" && (\n                  <div>\n                    <div className=\"taskItemDiv\">\n                      <Card border=\"dark\" style={{ width: \"18rem\" }}>\n                        <Card.Body>\n                          <Card.Title>{todoListItem.whatsTheStatus}</Card.Title>\n                          <Card.Text>{todoListItem.title}</Card.Text>\n                          <Card.Text>\n                            {todoListItem.settingForDate} {}{\" \"}\n                            {todoListItem.setting_for_what_time}\n                          </Card.Text>\n                          <Button\n                            variant=\"outline-danger\"\n                            className=\"taskBtn\"\n                            onClick={() =>\n                              changeWhatsTheStatus(todoListItemIndex)\n                            }\n                          >\n                            Mark as Complete\n                          </Button>\n                        </Card.Body>\n                      </Card>\n                    </div>\n                  </div>\n                )}\n              </div>\n            );\n          })}\n      </CardGroup>\n    </div>\n  );\n};\nexport default UpComing;\n","/Users/rj/todo-bootstrap/src/navBAr/NavBarOfTodos.jsx",[],["101","102"],"/Users/rj/todo-bootstrap/src/components/Others.jsx",["103","104","105","106"],"/Users/rj/todo-bootstrap/src/components/Amit.jsx",[],"/Users/rj/todo-bootstrap/src/components/SubCatInHeading.jsx",[],["107","108"],"/Users/rj/todo-bootstrap/src/components/SearchBar.jsx",["109"],"import { useContext, useState } from \"react\";\nimport {\n  Button,\n  Form,\n  FormControl,\n  Col,\n  Modal,\n  Row,\n  Container,\n} from \"react-bootstrap\";\nimport { DataContext } from \"../context/DataContext\";\n\nconst MyVerticallyCenteredModal = (props) => {\n  return (\n    <Modal {...props} aria-labelledby=\"contained-modal-title-vcenter\">\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          Add New Todo\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body className=\"show-grid\">\n        <Container>\n          <Row>\n            <Col xs={6} md={4}>\n              <label for=\"fname\"> Add ToDo:</label>\n            </Col>\n            <Col xs={12} md={8}>\n              <input\n                type=\"text\"\n                name=\"text\"\n                placeholder=\"add todo\"\n                value={props.inputState.title}\n                onChange={(e) =>\n                  props.setInputState({\n                    ...props.inputState,\n                    title: e.target.value,\n                  })\n                }\n              />\n            </Col>\n          </Row>\n\n          <Row>\n            <Col xs={6} md={4}>\n              <label for=\"fname\"> Date:</label>\n            </Col>\n            <Col xs={12} md={8}>\n              <input\n                type=\"date\"\n                name=\"text\"\n                placeholder=\"date\"\n                value={props.inputState.settingForDate}\n                onChange={(e) =>\n                  props.setInputState({\n                    ...props.inputState,\n                    settingForDate: e.target.value,\n                  })\n                }\n              />\n            </Col>\n          </Row>\n\n          <Row>\n            <Col xs={6} md={4}>\n              <label for=\"fname\"> Time:</label>\n            </Col>\n            <Col xs={12} md={8}>\n              <input\n                type=\"time\"\n                name=\"text\"\n                placeholder=\"time\"\n                value={props.inputState.setting_for_what_time}\n                onChange={(e) =>\n                  props.setInputState({\n                    ...props.inputState,\n                    setting_for_what_time: e.target.value,\n                  })\n                }\n              />\n            </Col>\n          </Row>\n\n          <Row>\n            <Col xs={6} md={4}>\n              <label for=\"fname\">Choose Category</label>\n            </Col>\n            <Col xs={12} md={8}>\n              <select\n                name=\"category\"\n                id=\"category\"\n                value={props.inputState.category_id}\n                onChange={(e) => {\n                  props.setSelectedCategoryValue(e.target.value);\n                  props.setInputState({\n                    ...props.inputState,\n                    category_id: e.target.value,\n                  });\n                }}\n              >\n                {props?.todoState?.category?.map((category, categoryIndex) => {\n                  return (\n                    <option value={category.category_id} key={category.category_id}>\n                      {category.category_name}\n                    </option>\n                  );\n                })}\n              </select>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col xs={6} md={4}>\n              <label for=\"fname\">Choose Sub-Category</label>\n            </Col>\n            <Col xs={12} md={8}>\n              <select\n                name=\"sub_category\"\n                id=\"sub_category\"\n                value={props.inputState.sub_category_id}\n                onChange={(e) => {\n                  props.setInputState({\n                    ...props.inputState,\n                    sub_category_id: e.target.value,\n                  });\n                }}\n              >\n                {props.todoState.sub_category\n                  .filter((it) => it.category_id == props.selectedCategoryValue)\n                  .map((subCatName) => {\n                    return (\n                      <option value={subCatName.sub_category_id} key={subCatName.sub_category_id}>\n                        {subCatName.sub_category_name}\n                      </option>\n                    );\n                  })}\n              </select>\n            </Col>\n          </Row>\n        </Container>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"danger\" onClick={props.onAdd}>\n          Add\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nconst SearchBar = () => {\n  const [todoState, setTodoState] = useContext(DataContext);\n  const [searchState, setSearchState] = useState(\"\");\n  const [modalShow, setModalShow] = useState(false);\n  const [selectedCategoryValue, setSelectedCategoryValue] = useState(1);\n  const uniqueKey = Date.now();\n  const todayDateTime = new Date();\n  const date =\n    todayDateTime.getFullYear() +\n    \"-\" +\n    (todayDateTime.getMonth() + 1) +\n    \"-\" +\n    todayDateTime.getDate();\n  const time =\n    todayDateTime.getHours() +\n    \":\" +\n    todayDateTime.getMinutes() +\n    \":\" +\n    todayDateTime.getSeconds();\n  const [inputState, setInputState] = useState({\n    id: uniqueKey,\n    category_id: \"1\",\n    sub_category_id: \"\",\n    category: \"\",\n    subCategory: \"\",\n    title: \"\",\n    settingForDate: \"\",\n    setting_on_what_time: date + \" \" + time,\n    setting_for_what_time: \"\",\n    whatsTheStatus: \"upcoming\",\n  });\n\n  const addingTodoOnClickBtn = () => {\n    const newTodo = {\n      id: inputState.id,\n      category_id: inputState.category_id,\n      sub_category_id: inputState.sub_category_id,\n      category: inputState.category,\n      subCategory: inputState.subCategory,\n      title: inputState.title,\n      settingForDate: inputState.settingForDate,\n      setting_on_what_time: inputState.setting_on_what_time,\n      setting_for_what_time: inputState.setting_for_what_time,\n      whatsTheStatus: inputState.whatsTheStatus,\n    };\n    setTodoState({\n      ...todoState,\n      task: [...todoState.task, newTodo],\n    });\n    setModalShow(false);\n  };\n\n  console.log(\n    selectedCategoryValue,\n    todoState.sub_category,\n    \"selectedCategoryValue\"\n  );\n\n  return (\n    <div style={{ marginTop: \"5vh\" }}>\n      <Col xs={10} md={12}>\n        <Form inline>\n          <Col xs={7} md={8}>\n            <FormControl\n              type=\"text\"\n              placeholder=\"Search\"\n              className=\"mr-sm-2 searchBar\"\n              value={searchState}\n              onChange={(event) => {\n                setSearchState(event.target.value);\n                setTodoState({\n                  ...todoState,\n                  search: searchState,\n                });\n              }}\n            />\n          </Col>\n          <Button\n            variant=\"danger\"\n            className=\"searchBtn\"\n            onClick={() => setModalShow(true)}\n          >\n            + Add New Todo\n          </Button>\n        </Form>\n      </Col>\n\n      <MyVerticallyCenteredModal\n        show={modalShow}\n        onAdd={addingTodoOnClickBtn}\n        // onAdd={() => setModalShow(false)}\n        setSelectedCategoryValue={setSelectedCategoryValue}\n        selectedCategoryValue={selectedCategoryValue}\n        todoState={todoState}\n        inputState={inputState}\n        setInputState={setInputState}\n      />\n    </div>\n  );\n};\n\nexport default SearchBar;\n","/Users/rj/todo-bootstrap/src/components/TaskItem.jsx",[],"/Users/rj/todo-bootstrap/src/reportWebVitals.js",[],"/Users/rj/todo-bootstrap/src/components/modal/categoryModal.jsx",[],"/Users/rj/todo-bootstrap/src/components/modal/subCategoryModal.jsx",[],"/Users/rj/todo-bootstrap/src/index.js",[],["110","111"],"/Users/rj/todo-bootstrap/src/components/test.jsx",["112","113"],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":1,"column":14,"nodeType":"120","messageId":"121","endLine":1,"endColumn":23},{"ruleId":"118","severity":1,"message":"122","line":1,"column":24,"nodeType":"120","messageId":"121","endLine":1,"endColumn":27},{"ruleId":"118","severity":1,"message":"123","line":1,"column":28,"nodeType":"120","messageId":"121","endLine":1,"endColumn":31},{"ruleId":"114","replacedBy":"124"},{"ruleId":"116","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":28,"column":34,"nodeType":"128","messageId":"129","endLine":28,"endColumn":36},{"ruleId":"130","severity":1,"message":"131","line":29,"column":44,"nodeType":"132","messageId":"133","endLine":29,"endColumn":46},{"ruleId":"118","severity":1,"message":"134","line":4,"column":8,"nodeType":"120","messageId":"121","endLine":4,"endColumn":12},{"ruleId":"118","severity":1,"message":"135","line":20,"column":9,"nodeType":"120","messageId":"121","endLine":20,"endColumn":19},{"ruleId":"130","severity":1,"message":"131","line":167,"column":54,"nodeType":"132","messageId":"133","endLine":167,"endColumn":56},{"ruleId":"126","severity":1,"message":"127","line":44,"column":27,"nodeType":"128","messageId":"129","endLine":44,"endColumn":29},{"ruleId":"130","severity":1,"message":"131","line":45,"column":34,"nodeType":"132","messageId":"133","endLine":45,"endColumn":36},{"ruleId":"126","severity":1,"message":"127","line":27,"column":34,"nodeType":"128","messageId":"129","endLine":27,"endColumn":36},{"ruleId":"130","severity":1,"message":"131","line":28,"column":44,"nodeType":"132","messageId":"133","endLine":28,"endColumn":46},{"ruleId":"114","replacedBy":"136"},{"ruleId":"116","replacedBy":"137"},{"ruleId":"118","severity":1,"message":"138","line":7,"column":10,"nodeType":"120","messageId":"121","endLine":7,"endColumn":14},{"ruleId":"118","severity":1,"message":"139","line":7,"column":16,"nodeType":"120","messageId":"121","endLine":7,"endColumn":23},{"ruleId":"126","severity":1,"message":"127","line":29,"column":34,"nodeType":"128","messageId":"129","endLine":29,"endColumn":36},{"ruleId":"130","severity":1,"message":"131","line":30,"column":44,"nodeType":"132","messageId":"133","endLine":30,"endColumn":46},{"ruleId":"114","replacedBy":"140"},{"ruleId":"116","replacedBy":"141"},{"ruleId":"130","severity":1,"message":"131","line":128,"column":50,"nodeType":"132","messageId":"133","endLine":128,"endColumn":52},{"ruleId":"114","replacedBy":"142"},{"ruleId":"116","replacedBy":"143"},{"ruleId":"118","severity":1,"message":"144","line":6,"column":31,"nodeType":"120","messageId":"121","endLine":6,"endColumn":53},{"ruleId":"118","severity":1,"message":"145","line":24,"column":34,"nodeType":"120","messageId":"121","endLine":24,"endColumn":45},"no-native-reassign",["146"],"no-negated-in-lhs",["147"],"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'Col' is defined but never used.",["146"],["147"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Amit' is defined but never used.","'handleShow' is assigned a value but never used.",["146"],["147"],"'show' is assigned a value but never used.","'setShow' is assigned a value but never used.",["146"],["147"],["146"],["147"],"'setTodoStateInUpComing' is assigned a value but never used.","'draggableId' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]